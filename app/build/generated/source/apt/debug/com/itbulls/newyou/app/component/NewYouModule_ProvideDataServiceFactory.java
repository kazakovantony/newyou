// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.itbulls.newyou.app.component;

import com.itbulls.newyou.app.model.WorkoutState;
import com.itbulls.newyou.app.service.DataService;
import com.noodle.Noodle;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NewYouModule_ProvideDataServiceFactory implements Factory<DataService> {
  private final NewYouModule module;

  private final Provider<WorkoutState> workoutStateProvider;

  private final Provider<Noodle> noodleProvider;

  public NewYouModule_ProvideDataServiceFactory(
      NewYouModule module,
      Provider<WorkoutState> workoutStateProvider,
      Provider<Noodle> noodleProvider) {
    this.module = module;
    this.workoutStateProvider = workoutStateProvider;
    this.noodleProvider = noodleProvider;
  }

  @Override
  public DataService get() {
    return Preconditions.checkNotNull(
        module.provideDataService(workoutStateProvider.get(), noodleProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<DataService> create(
      NewYouModule module,
      Provider<WorkoutState> workoutStateProvider,
      Provider<Noodle> noodleProvider) {
    return new NewYouModule_ProvideDataServiceFactory(module, workoutStateProvider, noodleProvider);
  }

  public static DataService proxyProvideDataService(
      NewYouModule instance, WorkoutState workoutState, Noodle noodle) {
    return instance.provideDataService(workoutState, noodle);
  }
}
