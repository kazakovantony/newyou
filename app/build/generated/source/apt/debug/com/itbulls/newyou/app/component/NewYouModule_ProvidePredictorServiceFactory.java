// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.itbulls.newyou.app.component;

import com.google.gson.Gson;
import com.itbulls.newyou.app.service.PredictorService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class NewYouModule_ProvidePredictorServiceFactory
    implements Factory<PredictorService> {
  private final NewYouModule module;

  private final Provider<Gson> gsonProvider;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public NewYouModule_ProvidePredictorServiceFactory(
      NewYouModule module,
      Provider<Gson> gsonProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.module = module;
    this.gsonProvider = gsonProvider;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public PredictorService get() {
    return Preconditions.checkNotNull(
        module.providePredictorService(gsonProvider.get(), okHttpClientProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<PredictorService> create(
      NewYouModule module,
      Provider<Gson> gsonProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NewYouModule_ProvidePredictorServiceFactory(
        module, gsonProvider, okHttpClientProvider);
  }

  public static PredictorService proxyProvidePredictorService(
      NewYouModule instance, Gson gson, OkHttpClient okHttpClient) {
    return instance.providePredictorService(gson, okHttpClient);
  }
}
