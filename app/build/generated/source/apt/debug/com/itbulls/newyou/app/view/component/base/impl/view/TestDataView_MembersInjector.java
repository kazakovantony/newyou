// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.itbulls.newyou.app.view.component.base.impl.view;

import com.itbulls.newyou.app.listener.ServiceConnectionListener;
import com.itbulls.newyou.app.model.WorkoutState;
import com.itbulls.newyou.app.service.DataService;
import com.itbulls.newyou.app.service.JsonService;
import com.itbulls.newyou.app.service.PredictorService;
import com.itbulls.newyou.app.service.WatchServiceProvider;
import com.itbulls.newyou.app.service.event.EventService;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class TestDataView_MembersInjector implements MembersInjector<TestDataView> {
  private final Provider<EventService> eventServiceProvider;

  private final Provider<DataService> dataServiceProvider;

  private final Provider<PredictorService> predictorServiceProvider;

  private final Provider<WatchServiceProvider> watchConnectionServiceProvider;

  private final Provider<WorkoutState> workoutStateProvider;

  private final Provider<ServiceConnectionListener> serviceConnectionListenerProvider;

  private final Provider<JsonService> jsonServiceProvider;

  public TestDataView_MembersInjector(
      Provider<EventService> eventServiceProvider,
      Provider<DataService> dataServiceProvider,
      Provider<PredictorService> predictorServiceProvider,
      Provider<WatchServiceProvider> watchConnectionServiceProvider,
      Provider<WorkoutState> workoutStateProvider,
      Provider<ServiceConnectionListener> serviceConnectionListenerProvider,
      Provider<JsonService> jsonServiceProvider) {
    this.eventServiceProvider = eventServiceProvider;
    this.dataServiceProvider = dataServiceProvider;
    this.predictorServiceProvider = predictorServiceProvider;
    this.watchConnectionServiceProvider = watchConnectionServiceProvider;
    this.workoutStateProvider = workoutStateProvider;
    this.serviceConnectionListenerProvider = serviceConnectionListenerProvider;
    this.jsonServiceProvider = jsonServiceProvider;
  }

  public static MembersInjector<TestDataView> create(
      Provider<EventService> eventServiceProvider,
      Provider<DataService> dataServiceProvider,
      Provider<PredictorService> predictorServiceProvider,
      Provider<WatchServiceProvider> watchConnectionServiceProvider,
      Provider<WorkoutState> workoutStateProvider,
      Provider<ServiceConnectionListener> serviceConnectionListenerProvider,
      Provider<JsonService> jsonServiceProvider) {
    return new TestDataView_MembersInjector(
        eventServiceProvider,
        dataServiceProvider,
        predictorServiceProvider,
        watchConnectionServiceProvider,
        workoutStateProvider,
        serviceConnectionListenerProvider,
        jsonServiceProvider);
  }

  @Override
  public void injectMembers(TestDataView instance) {
    injectEventService(instance, eventServiceProvider.get());
    injectDataService(instance, dataServiceProvider.get());
    injectPredictorService(instance, predictorServiceProvider.get());
    injectWatchConnectionServiceProvider(instance, watchConnectionServiceProvider.get());
    injectWorkoutState(instance, workoutStateProvider.get());
    injectServiceConnectionListener(instance, serviceConnectionListenerProvider.get());
    injectJsonService(instance, jsonServiceProvider.get());
  }

  public static void injectEventService(TestDataView instance, EventService eventService) {
    instance.eventService = eventService;
  }

  public static void injectDataService(TestDataView instance, DataService dataService) {
    instance.dataService = dataService;
  }

  public static void injectPredictorService(
      TestDataView instance, PredictorService predictorService) {
    instance.predictorService = predictorService;
  }

  public static void injectWatchConnectionServiceProvider(
      TestDataView instance, WatchServiceProvider watchConnectionServiceProvider) {
    instance.watchConnectionServiceProvider = watchConnectionServiceProvider;
  }

  public static void injectWorkoutState(TestDataView instance, WorkoutState workoutState) {
    instance.workoutState = workoutState;
  }

  public static void injectServiceConnectionListener(
      TestDataView instance, ServiceConnectionListener serviceConnectionListener) {
    instance.serviceConnectionListener = serviceConnectionListener;
  }

  public static void injectJsonService(TestDataView instance, JsonService jsonService) {
    instance.jsonService = jsonService;
  }
}
